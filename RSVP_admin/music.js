let supabase; // üëà bi·∫øn to√†n c·ª•c

(async function () {
  supabase = window.supabase.createClient(
    CONFIG.SUPABASE_URL,
    CONFIG.SUPABASE_KEY
  );

  const user = JSON.parse(localStorage.getItem("userInfo"));
  if (!user || !user.username || user.role === 1) {
    window.location.href = "/RSVP_admin/login.html";
    return;
  }

  const user2 = user; // G√°n l·∫°i n·∫øu c·∫ßn, nh∆∞ng b·∫°n c√≥ th·ªÉ d√πng lu√¥n `user`

  let allThemes = [];

  let currentPage = 1;
  const itemsPerPage = 10; // üëà s·ªë b·∫£n ghi m·ªói trang

  async function loadDataFromTable() {
    const { data, error } = await supabase
      .from("music_list")
      .select("*")
      .order("id", { ascending: true });

    if (error) {
      document.getElementById(
        "rsvpTableBody"
      ).innerHTML = `<tr><td colspan="4">‚ö†Ô∏è L·ªói t·∫£i d·ªØ li·ªáu t·ª´ music_list</td></tr>`;
      console.error(error.message);
      return;
    }

    allThemes = data;
    renderData(allThemes);
  }

  function renderData(data) {
    const tbody = document.getElementById("rsvpTableBody");
    tbody.innerHTML = "";

    // üìÑ T√≠nh to√°n ph√¢n trang
    const totalItems = data.length;
    const totalPages = Math.ceil(totalItems / itemsPerPage);
    const startIndex = (currentPage - 1) * itemsPerPage;
    const paginatedData = data.slice(startIndex, startIndex + itemsPerPage);

    paginatedData.forEach((item, index) => {
      const tr = document.createElement("tr");
      tr.innerHTML = `
      <td class="p-2 text-center">${startIndex + index + 1}</td>
      <td class="p-2 text-center">${item.name_display}</td>
      <td class="p-2 text-center">${item.file_url}</td>

      <td class="p-2 align-middle bg-transparent border-b-0 whitespace-nowrap shadow-transparent text-center adminOnly">
        <a class="text-xs font-semibold text-slate-400" href="#" onclick="editTheme(${
          item.id
        })">‚úèÔ∏è S·ª≠a</a>
        <a class="text-xs font-semibold text-slate-400 ml-2" href="#" onclick="deleteEntry(${
          item.id
        }, '${item.name_display.replace(/'/g, "\\'")}')">üóëÔ∏è Xo√°</a>
      </td>
    `;
      tbody.appendChild(tr);
    });

    // üëá Hi·ªÉn th·ªã/·∫©n n√∫t admin
    document.querySelectorAll(".adminOnly").forEach((el) => {
      el.style.display = user2?.role === 0 ? "table-cell" : "none";
    });

    // üî¢ Render pagination controls
    renderPagination(totalPages);
  }

  function renderPagination(totalPages) {
    const containerId = "paginationControls";
    let container = document.getElementById(containerId);

    // N·∫øu ch∆∞a c√≥ container th√¨ t·∫°o
    if (!container) {
      container = document.createElement("div");
      container.id = containerId;
      container.className =
        "flex flex-wrap justify-center items-center gap-3 my-6";

      document
        .querySelector(".flex-auto.px-0.pt-0.pb-2") // ch√®n d∆∞·ªõi b·∫£ng
        .appendChild(container);
    }

    container.innerHTML = ""; // Xo√° n·ªôi dung c≈©

    // N√∫t "Trang tr∆∞·ªõc"
    const prevBtn = document.createElement("button");
    prevBtn.innerText = "‚Üê Tr∆∞·ªõc";
    prevBtn.className =
      "px-3 py-1 rounded bg-gray-200 hover:bg-gray-300 disabled:opacity-50";
    prevBtn.disabled = currentPage === 1;
    prevBtn.onclick = () => {
      if (currentPage > 1) {
        currentPage--;
        renderData(allThemes);
      }
    };
    container.appendChild(prevBtn);

    // Hi·ªÉn th·ªã s·ªë trang
    for (let i = 1; i <= totalPages; i++) {
      const btn = document.createElement("button");
      btn.innerText = i;
      btn.className =
        "px-3 py-1 rounded " +
        (i === currentPage
          ? "bg-blue-500 text-white"
          : "bg-gray-200 hover:bg-gray-300");
      btn.onclick = () => {
        currentPage = i;
        renderData(allThemes);
      };
      container.appendChild(btn);
    }

    // N√∫t "Trang sau"
    const nextBtn = document.createElement("button");
    nextBtn.innerText = "Sau ‚Üí";
    nextBtn.className =
      "px-3 py-1 rounded bg-gray-200 hover:bg-gray-300 disabled:opacity-50";
    nextBtn.disabled = currentPage === totalPages;
    nextBtn.onclick = () => {
      if (currentPage < totalPages) {
        currentPage++;
        renderData(allThemes);
      }
    };
    container.appendChild(nextBtn);
  }

  // ‚úÖ Event xo√°
  window.deleteEntry = async function (id, name) {
    if (!confirm("B·∫°n c√≥ ch·∫Øc mu·ªën xo√° " + name + " kh√¥ng?")) return;

    const { error } = await supabase.from("music_list").delete().eq("id", id);

    if (error) {
      alert("‚ùå Xo√° th·∫•t b·∫°i: " + error.message);
      return;
    }

    await loadDataFromTable();
    // N·∫øu kh√¥ng c√≥ `loadChartFromTable`, b·∫°n c√≥ th·ªÉ b·ªè d√≤ng d∆∞·ªõi:
    // await loadChartFromTable(window.currentTable);
  };

  // ‚úÖ Load l·∫ßn ƒë·∫ßu
  await loadDataFromTable();

  window.editTheme = function (id) {
    const user = allThemes.find((u) => u.id === id);
    if (!user) return alert("Kh√¥ng t√¨m th·∫•y user");

    document.getElementById("editId").value = user.id;
    document.getElementById("editNameDisplay").value = user.name_display;
    document.getElementById("editFileURL").value = user.file_url;

    document.getElementById("editPopupOverlay").style.display = "flex";
  };

  window.saveEdit = async function () {
    const id = document.getElementById("editId").value;
    const name_display = document
      .getElementById("editNameDisplay")
      .value.trim();
    const file_url = document.getElementById("editFileURL").value.trim();

    const { error } = await supabase
      .from("music_list")
      .update({ name_display, file_url })
      .eq("id", id);

    if (error) {
      alert("‚ùå L·ªói khi c·∫≠p nh·∫≠t: " + error.message);
      return;
    }

    closePopup();
    await loadDataFromTable();
  };

  window.openAddPopup = function () {
    document.getElementById("addNameDisplay").value = "";
    document.getElementById("addFileURL").value = "";
    document.getElementById("addPopupOverlay").style.display = "flex";
  };
  window.saveNewTheme = async function () {
    const name_display = document.getElementById("addNameDisplay").value.trim();
    const file_url = document.getElementById("addFileURL").value.trim();

    if (!name_display) return alert("‚ö†Ô∏è Vui l√≤ng nh·∫≠p t√™n nh·∫°c");
    if (!file_url) return alert("‚ö†Ô∏è Vui l√≤ng t√™n file");

    const { error } = await supabase.from("music_list").insert({
      name_display,
      file_url,
    });

    if (error) {
      alert("‚ùå Th√™m th·∫•t b·∫°i: " + error.message);
      return;
    }

    closeAddPopup();
    await loadDataFromTable();
  };

  window.closePopup = function () {
    document.getElementById("editPopupOverlay").style.display = "none";
  };
  window.closeAddPopup = function () {
    document.getElementById("addPopupOverlay").style.display = "none";
  };

  // =======================================
  // üì§ XU·∫§T EXCEL
  // =======================================
  window.exportToExcel = async function () {
    const currentTable = "music_list"; // üëà c·ªë ƒë·ªãnh b·∫£ng

    const { data, error } = await supabase.from(currentTable).select("*");

    if (error) {
      alert("‚ùå L·ªói l·∫•y d·ªØ li·ªáu: " + error.message);
      return;
    }

    if (!data || data.length === 0) {
      alert("‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ xu·∫•t.");
      return;
    }

    const worksheet = XLSX.utils.json_to_sheet(data);
    const workbook = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(workbook, worksheet, currentTable);

    const fileName = `${currentTable}_export.xlsx`;
    XLSX.writeFile(workbook, fileName);
  };

  // =======================================
  // üì• NH·∫¨P EXCEL
  // =======================================
  window.importExcel = async function () {
    const currentTable = "music_list"; // üëà c·ªë ƒë·ªãnh b·∫£ng

    const fileInput = document.getElementById("excelFile");
    if (!fileInput || !fileInput.files.length) {
      alert("H√£y ch·ªçn file Excel!");
      return;
    }

    const file = fileInput.files[0];
    const reader = new FileReader();

    reader.onload = async function (e) {
      const data = new Uint8Array(e.target.result);
      const workbook = XLSX.read(data, { type: "array" });

      // L·∫•y sheet ƒë·∫ßu ti√™n
      const sheetName = workbook.SheetNames[0];
      const worksheet = workbook.Sheets[sheetName];

      // Convert sheet ‚Üí JSON
      const jsonData = XLSX.utils.sheet_to_json(worksheet);
      console.log("Excel data:", jsonData);

      // G·ª≠i d·ªØ li·ªáu l√™n Supabase
      const { data: inserted, error } = await supabase
        .from(currentTable)
        .insert(jsonData);

      if (error) {
        console.error("Import l·ªói:", error);
        alert("‚ùå C√≥ l·ªói khi import!");
      } else {
        console.log("ƒê√£ import:", inserted);
        alert("‚úÖ Import th√†nh c√¥ng!");
        // G·ªçi l·∫°i load n·∫øu b·∫°n c√≥ h√†m load danh s√°ch nh·∫°c
        if (typeof loadDataFromTable === "function") {
          await loadDataFromTable(currentTable);
        }
      }
    };

    reader.readAsArrayBuffer(file);
  };
})();
